@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'internal' as *;
@use 'variables' as *;


// CORE

@function xyz-name($name, $mode: 'all') {
  @if $mode == 'all' {
    @return $name;
  }
  @return $mode + '-' + $name;
}


// VARIABLES

@function xyz-var($name, $mode: 'all', $fallback: 'default') {
  @if $fallback == 'default' {
    $fallback: var(--xyz-#{$name}-default);
  }
  @return var(--xyz-#{xyz-name($name, $mode)}, var(--xyz-#{$name}, #{$fallback}));
}

@mixin xyz-set-all($val: initial) {
  @each $name, $variable in $xyz-variables-map {
    $variable-modes: map.get($variable, 'modes');

    @each $mode in $variable-modes {
      --xyz-#{xyz-name($name, $mode)}: #{$val};
    }
  }
}


// UTILITIES

@function xyz-utility-ease($level: 'ease') {
  @return map.get($xyz-utility-eases, $level);
}

@function xyz-utility-time($level: '0') {
  @return map.get($xyz-utility-times, $level);
}

@function xyz-utility-iteration($level: '0') {
  @return map.get($xyz-utility-iterations, $level);
}

@function xyz-utility-origin($level: 'center') {
  @return map.get($xyz-utility-origins, $level);
}

@function xyz-utility-fade($level: '0') {
  @return map.get($xyz-utility-fades, $level);
}

@function xyz-utility-translation($level: '0') {
  @return map.get($xyz-utility-translations, $level);
}

@function xyz-utility-translation-z($level: '0') {
  @return map.get($xyz-utility-translations-z, $level);
}

@function xyz-utility-rotation($level: '0') {
  @return map.get($xyz-utility-rotations, $level);
}

@function xyz-utility-scale($level: '0') {
  @return map.get($xyz-utility-scales, $level);
}

@mixin xyz-utility($name, $level: 'default', $mode: 'all') {
  $utility: map.get($xyz-utilities-map, $name);
  $vars: map.get($utility, 'vars');
  $default-val: map.get($utility, 'default-val');
  $utility-map: map.get($utility, 'utility-map');
  $transform-func: map.get($utility, 'transform-func');

  $val: null;
  @if $level == 'default' {
    $val: $default-val;
  } @else {
    $val: map.get($utility-map, $level);

    @if $val == null {
      @error '#{$level} is not a valid level for the #{$name} utility.';
    }

    @if $transform-func {
      $val: meta.call($transform-func, $val);
    }
  }

  @each $var in $vars {
    --xyz-#{xyz-name($var, $mode)}: #{$val};
  }
}

@mixin xyz-make-utilities($name, $utility) {
  $utility-modes: map.get($utility, 'modes');
  $utility-map: map.get($utility, 'utility-map');

  @each $mode in $utility-modes {
    @each $level in list.join('default', map.keys($utility-map)) {
      $mode-name: xyz-name($name, $mode);

      @if $level == 'default' {
        [xyz~=#{$mode-name}] {
          @include xyz-utility($name, $level, $mode);
        }
      } @else {
        [xyz~=#{$mode-name}-#{$level}] {
          @include xyz-utility($name, $level, $mode);
        }
      }
    }
  }
}

@mixin xyz-make-keyframes($name, $make-utilities: true) {
  @each $mode in $xyz-modes {
    $mode-name: xyz-name($name, $mode);

    @keyframes xyz-#{$mode-name} {
      @content($mode);
    }
  }

  @if $make-utilities {
    @each $mode in $xyz-modes {
      $mode-name: xyz-name($name, $mode);

      [xyz~=#{$name}], [xyz~=#{$mode-name}] {
        --xyz-#{xyz-name('keyframes', $mode)}: xyz-#{$mode-name};
      }
    }
  }
}

@mixin xyz($utilities) {
  $utilities-list: xyz-str-split($utilities);

  @each $utility in $utilities-list {
    $utility-mode: null;
    $utility-name: null;
    $utility-level: null;

    @each $name in map.keys($xyz-utilities-map) {
      @if string.index($utility, $name) {
        $utility-name: $name;
      }
    }

    @if $utility-name == null {
      @error '#{$utility} is not a valid xyz utility.';
    }

    $utility-level: string.slice($utility, string.index($utility, $utility-name) + string.length($utility-name) + 1);
    @if string.length($utility-level) == 0 {
      $utility-level: 'default';
    }

    @each $mode in list.append($xyz-modes-all, $xyz-mode-move) {
      @if string.index($utility, $mode) {
        $utility-mode: $mode;
      }
    }
    @if $utility-mode == null {
      $utility-mode: 'all';
    }

    @include xyz-utility($utility-name, $utility-level, $utility-mode);
  }
}

// ANIMATIONS

@mixin xyz-animation($mode) {
  $keyframes: xyz-var('keyframes', $mode, xyz-#{xyz-name('keyframes', $mode)});
  $duration: xyz-var('duration', $mode);
  $ease: xyz-var('ease', $mode);
  $delay: xyz-var('delay', $mode, 0s);
  $stagger: xyz-var('stagger', $mode, 0s);
  $stagger-rev: xyz-var('stagger-rev', $mode, 0s);
  $iterate: xyz-var('iterate', $mode, 1);
  $origin: xyz-var('origin', $mode, center);
  $index: var(--xyz-index, 0);
  $index-rev: var(--xyz-index-rev, 0);

  $direction: normal;
  @if $mode == 'out' {
    $direction: reverse;
  }

  transform-origin: #{$origin};
  backface-visibility: visible;

  animation:
    #{$keyframes}
    #{$duration}
    #{$ease}
    calc(#{$delay} + #{$stagger} * #{$index} + #{$stagger-rev} * #{$index-rev})
    #{$iterate}
    #{$direction}
    both
    !important;

  @media (prefers-reduced-motion: reduce) {
    animation: none !important;
  }
}

@mixin xyz-in() {
  @include xyz-animation('in')
}

@mixin xyz-out() {
  @include xyz-animation('out')
}

@mixin xyz-appear() {
  @include xyz-animation('appear')
}
